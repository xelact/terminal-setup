" Install vundle: git clone https://github.com/VundleVim/Vundle.vim.git  ~/.vim/bundle/Vundle.vim
" Install all plugins :PluginInstall
"
syntax on
colorscheme default

" Vundle VIM
"""""""""""""""""""
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" added nerdtree
Plugin 'scrooloose/nerdtree'

" added vim-airline
Plugin 'vim-airline/vim-airline'

" adding themes to vim-airline
Plugin 'vim-airline/vim-airline-themes'

" adding fonts for airline
Plugin 'powerline/powerline-fonts'

" Plugin adding colorschemes
Plugin 'flazz/vim-colorschemes'

" Plugin for completing in Python
Plugin 'davidhalter/jedi-vim'

" Plugin for sorting imports in Python: :Isort  after pip3 install isort
Plugin 'fisadev/vim-isort'

"Plugin for git
Plugin 'tpope/vim-fugitive'

" Plugin for moving from vim to tmux panes: https://github.com/christoomey/vim-tmux-navigator
Plugin 'christoomey/vim-tmux-navigator'

" Add plugins here

call vundle#end()
filetype plugin indent on

set clipboard=unnamed

" Rebind <Leader> key
" I like to have it here becuase it is easier to reach than the default and
" it is next to ``m`` and ``n`` which I use for navigating between tabs.
let mapleader = ","

" bind Ctrl+<movement> keys to move around the windows, instead of using
" " Ctrl+w + <movement>
" " Every unnecessary keystroke that can be saved is good for your health :)
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" easier moving between tabs
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" <CR> highlights all occurences of the current word without moving
nnoremap <CR> :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" strip all trailing whitespace in the current file with <leader>W
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Highlight trailing whitespaces
highlight Error ctermbg=red ctermfg=white guibg=red guifg=white
autocmd ColorScheme * highlight Error ctermbg=red ctermfg=white guibg=red guifg=white
match Error '\s\+$'
autocmd WinEnter,BufWinEnter * match Error /\s\+$/
autocmd InsertEnter * match Error /\s\+\%#\@<!$/
autocmd InsertLeave * match Error /\s\+$/
autocmd WinLeave,BufWinLeave * match Error //

" Highlight tabs
highlight SpecialKey ctermfg=1
set list
set listchars=tab:T>

" strip all trailing whitespace in the current file with <leader>W
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

"set numbers
set number

"SEARCHES
""""""""""""""""""""
set hlsearch "highlight searches
set incsearch "start highlighting before press CR
set ignorecase "case insensitive
set smartcase "use case if any caps used

" NERDTree
""""""""""""""""""""
" auto open NERDTREE
"au VimEnter *  NERDTree

"open NerdTree
nmap <leader>ne :NERDTreeToggle<CR>

" if you dont want to see ^G
" let g:NERDTreeNodeDelimiter = "\u00a0"

" show hidden files
let NERDTreeShowHidden=1

" I think this is for moving the line that separate the
" pane with dirs
map + <c-w>>
map - <c-w><

" Color scheme
set t_Co=256
color Monokai


"VIM-AIRLINE (line status)
""""""""""""""""""""""""""
let g:airline_theme='minimalist'
let g:airline_powerline_fonts = 1

" command for quiting nerdtree when only one file is open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" enumerate TABs in vim
set tabpagemax=15
"color of the empty bar
hi TabLineFill ctermfg=248 ctermbg=248
"color of font and backgroung of selected tab
hi TabLineSel term=bold cterm=bold ctermfg=0 ctermbg=234
"
hi TabWinNumSel term=bold cterm=bold ctermfg=90 ctermbg=234
" colot of font and background of the number from the selected tab
hi TabNumSel term=bold cterm=bold ctermfg=0 ctermbg=234
"color of font and backgroung of unselected tabs
hi TabLine term=underline ctermfg=232 ctermbg=242
"
hi TabWinNum term=bold cterm=bold ctermfg=231 ctermbg=245
" color of font and background of the number from the unselected tabs
hi TabNum term=bold cterm=bold ctermfg=232 ctermbg=242

"Rename tabs to show tab# and # of viewports
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%2*')
            let s .= ' '
            let wn = tabpagewinnr(i,'$')

            let s .= (i== t ? '%#TabNumSel#' : '%#TabNum#')
            let s .= i
            if tabpagewinnr(i,'$') > 1
                let s .= '.'
                let s .= (i== t ? '%#TabWinNumSel#' : '%#TabWinNum#')
                let s .= (tabpagewinnr(i,'$') > 1 ? wn : '')
            end

            let s .= ' %*'
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s .= file
            let s .= (i == t ? '%m' : '')
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        return s
    endfunction
    set stal=2
    set tabline=%!MyTabLine()
endif

hi Normal     ctermbg=234
